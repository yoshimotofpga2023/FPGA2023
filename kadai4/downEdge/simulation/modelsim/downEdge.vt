// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/10/2023 01:22:33"
                                                                                
// Verilog Test Bench template for design : downEdge
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module downEdge_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLK;
reg key0;
reg key1;
reg key2;
reg key3;
reg key4;
reg key5;
reg key6;
reg key7;
reg key8;
reg key9;
// wires                                               
wire down;
wire Q1;
wire Q2;

// assign statements (if any)                          
downEdge i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.down(down),
	.key0(key0),
	.key1(key1),
	.key2(key2),
	.key3(key3),
	.key4(key4),
	.key5(key5),
	.key6(key6),
	.key7(key7),
	.key8(key8),
	.key9(key9),
	.Q1(Q1),
	.Q2(Q2)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
CLK <= 0;
key1 <=0;

#10
CLK <= 1;
#10
CLK <= 0;
#10
CLK <= 1;
#10
CLK <= 0;
key1 <= 1;

#10
CLK <= 1;
#10
CLK <= 0;
#10
CLK <= 1;
#10
CLK <= 0;
#10
CLK <= 1;
#10
CLK <= 0;

key1 <=0;

#20
CLK <= 1;
#20
CLK <= 0;
#20
CLK <= 1;
#20
CLK <= 0;
#20
CLK <= 1;
#20
CLK <= 0;







// --> end                                             
end                                                    
endmodule

